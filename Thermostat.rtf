{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red217\green11\blue0;}
\margl1440\margr1440\vieww25320\viewh14600\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs36 \cf0 Thermostat\
\
----------------------------------------------------------------------------------------\
1/26/2016 - first version\
2/7/2016 - ?resuming with thermostat\
\
\
LEFT OFF: I created the test and need to finish the mockup classes\
\
\
----------------------------------------------------------------------------------------\
\
\
Goal:\
 - webpage to set temperature\
 - rules: warm up in morning\
 - record of external temp, internal temp, times of active heating\
\
----\
Version 1: Webpage to set temperature\
\
NEEDED:\
A. thermostat daemon - given a set temp, activate heat below threshold until above threshold\
B. control web page - post a temperature, which communicates with daemon process\
C. temperature monitor - interface with USB\
D. hardware - relays to heating system, breakout board of pi, power source\
\
---\
A. thermostat daemon\
\
a single python script\
endpoint on localhost:port\
	posts heater status to a localhost:port\
	reports set point \
	accepts new set point on localhost:port\
	reports current temperature, which it is reading from the thermometer component\
polls current temperature from some url or reads from database\
capable of POSTING heater status change to any url\
after 5 minutes below set point-1, turns on heater\
keeps heater on until set point+1\
doesn't cycle off heater for at least 5 minutes\
doesn't keep heater on for more than 20 minutes\
does turn heater on until it's been off for 20 minutes\
logging\
unit testing\
sqlite database of history by minute\
daemon infrastructure to ensure always running\
\
---\
B. control web page\
\
initially, this is just an HTML interface to the thermostat json endpoints\
	it doesn't have any internal state, persistence, or logic\
	eventually, this would display temperature grabs and analysis\
\
reports current set point, which it reads from thermostat endpoint\
reports heater status, which it reads from thermostat endpoint\
form to change set point, which it posts to thermostat endpoint\
DDNS to be accessible from outside house\
\
---\
C. temperature monitor\
\
python script, run as each minute cron job\
polls temperature from USB\
saves temperature to sqlite database every minute\
	including a 1-record last-query table\
\
---\
D. heater interface & hardware\
\
this will be written as a python module that can be used by other python programs\
it will have a script front end for testing with these options:\
	--turn_on\
	--turn_off\
	--status\
it may just save state as a file\
buy relays and wire on amazon\
for starters, only need a single relay for the heater (not AC)\
breakout board for raspberry pi\
	first test turning on a LED\
	then hook up to relay\
need to run extension cord down from attic and out existing hole\
setup pi & relays on hutch\
\
---\
A. thermostat daemon - test setup\
\
in order to facilitate testing, the thermostat instance needs to take the following objects\
	heater\
	thermometer\
	clock\
\
heater\
	the real heater instance will be the python module of component D\
	the test heater instance will have the same interface, but can be told what states it should expect to be in, and will throw an exception if it is told to change into an unexpected state\
\
thermometer\
	the real thermometer instance will read the current temperature from the sqlite database that component C is writing to\
	the test thermometer can be told to report any temperature\
\
clock\
	the real clock instance will report the current time and, at some interval, trigger the thermostat for a state decision\
	the test clock can be set to report any time and will manually trigger the thermostat for a state decision\
	this sounds unusual, but the unit tests need to be able to simulate the passing of time. For example, the test needs to be able to simulate the passing of 10 minutes after the end of a heating cycle\
\
tests:\
report and change heater status\
report thermometer reading\
accept and report set point\
after 5 minutes below set point-1, turns on heater\
keeps heater on until set point+1\
doesn't cycle off heater for at least 5 minutes\
doesn't keep heater on for more than 30 minutes\
	\cf2 How do thermostats handle this? If I leave the door wide open, will it cranks the heat for 16 hours? Or will it eventually time out and permanently shut down?\cf0 \
does turn heater on until it's been off for 20 minutes\
\
\
----\
\
On - Turn on in 20 seconds. The 20 second delay is in case the user changes status again. Don't turn on before the cycle protection.\
	# it's fine if the heater is already running based on auto settings, this will be harmlessly redundant\
	# if self.no_turn_on_before is None, the other option is selected (i.e. not an exception)\
\
Off - Wait 20 seconds\
	# nearly the opposite of on mode\
\
Auto\
	if the heater is on\
		if the temperature is below low threshold, stay on\
		if the temperature is above low threshold, turn off as soon as possible\
	if the heater is off\
	 \
\
\
def check_thresholds(self):\
	# record threshold crossings\
	if self.threshold_low:\
		# if below low threshold\
		if self.thermometer.temperature < self.threshold_low:\
			if self.crossed_below_low_threshold_at is None:\
				self.crossed_below_low_threshold_at = self.clock.time()\
				self._logger.debug("Exceeded low threshold");\
		# if at or above low threshold\
		else:\
			if self.crossed_below_low_threshold_at is not None:\
				self.crossed_below_low_threshold_at = None\
				self._logger.debug("Within low threshold");\
	if self.threshold_high:\
		# if above high threshold\
		if self.thermometer.temperature > self.threshold_high:\
			if self.crossed_above_high_threshold_at is None:\
				self.crossed_above_high_threshold_at = self.clock.time()\
				self._logger.debug("Exceeded high threshold);\
		# if at or below high threshold\
		else:\
			if self.crossed_above_high_threshold_at is not None:\
				self.crossed_above_high_thresholdat = None\
				self._logger.debug("Within high threshold")\
\
def iterate(self):\
\
	self.check_thresholds()\
\
\
}