{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red217\green11\blue0;}
\margl1440\margr1440\vieww25320\viewh14600\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs36 \cf0 Thermostat\
\
----------------------------------------------------------------------------------------\
1/26/2016 - first version\
2/7/2016 - resuming with thermostat\
2/14/2016 - majority of coding HeaterControl and Thermostat\
2/15/2016 - tests working for HeaterControl and Thermostat\
LEFT OFF - refactoring HeaterCycleProtection (see end of document)\
2/16/2016 - Basic LED script working on Raspberry Pi\
\
\
----------------------------------------------------------------------------------------\
\
\
Goal:\
 - webpage to set temperature\
 - rules: warm up in morning\
 - record of external temp, internal temp, times of active heating\
\
----\
Version 1: Webpage to set temperature\
\
NEEDED:\
A. thermostat daemon - given a set temp, activate heat below threshold until above threshold\
B. control web page - post a temperature, which communicates with daemon process\
C. temperature monitor - interface with USB\
D. hardware - relays to heating system, breakout board of pi, power source\
\
---\
A. thermostat daemon\
\
a single python script\
endpoint on localhost:port\
	posts heater status to a localhost:port\
	reports set point \
	accepts new set point on localhost:port\
	reports current temperature, which it is reading from the thermometer component\
polls current temperature from some url or reads from database\
capable of POSTING heater status change to any url\
after 5 minutes below set point-1, turns on heater\
keeps heater on until set point+1\
doesn't cycle off heater for at least 5 minutes\
doesn't keep heater on for more than 20 minutes\
does turn heater on until it's been off for 20 minutes\
logging\
unit testing\
sqlite database of history by minute\
daemon infrastructure to ensure always running\
\
---\
B. control web page\
\
initially, this is just an HTML interface to the thermostat json endpoints\
	it doesn't have any internal state, persistence, or logic\
	eventually, this would display temperature grabs and analysis\
\
reports current set point, which it reads from thermostat endpoint\
reports heater status, which it reads from thermostat endpoint\
form to change set point, which it posts to thermostat endpoint\
DDNS to be accessible from outside house\
\
---\
C. temperature monitor\
\
python script, run as each minute cron job\
polls temperature from USB\
saves temperature to sqlite database every minute\
	including a 1-record last-query table\
\
---\
D. heater interface & hardware\
\
this will be written as a python module that can be used by other python programs\
it will have a script front end for testing with these options:\
	--turn_on\
	--turn_off\
	--status\
it may just save state as a file\
buy relays and wire on amazon\
for starters, only need a single relay for the heater (not AC)\
breakout board for raspberry pi\
	first test turning on a LED\
	then hook up to relay\
need to run extension cord down from attic and out existing hole\
setup pi & relays on hutch\
\
---\
A. thermostat daemon - test setup\
\
in order to facilitate testing, the thermostat instance needs to take the following objects\
	heater\
	thermometer\
	clock\
\
heater\
	the real heater instance will be the python module of component D\
	the test heater instance will have the same interface, but can be told what states it should expect to be in, and will throw an exception if it is told to change into an unexpected state\
\
thermometer\
	the real thermometer instance will read the current temperature from the sqlite database that component C is writing to\
	the test thermometer can be told to report any temperature\
\
clock\
	the real clock instance will report the current time and, at some interval, trigger the thermostat for a state decision\
	the test clock can be set to report any time and will manually trigger the thermostat for a state decision\
	this sounds unusual, but the unit tests need to be able to simulate the passing of time. For example, the test needs to be able to simulate the passing of 10 minutes after the end of a heating cycle\
\
tests:\
report and change heater status\
report thermometer reading\
accept and report set point\
after 5 minutes below set point-1, turns on heater\
keeps heater on until set point+1\
doesn't cycle off heater for at least 5 minutes\
doesn't keep heater on for more than 30 minutes\
	\cf2 How do thermostats handle this? If I leave the door wide open, will it cranks the heat for 16 hours? Or will it eventually time out and permanently shut down?\cf0 \
does turn heater on until it's been off for 20 minutes\
\
\
----\
\
LEFT OFF: \
\
The tests were all passing.\
\
I'm changing the "HeaterCycleProtection" to sit on top of AbstractHeater. The test code should use HeaterCycleProtection, which sits on top of the TestHeater. That will let me do the more elaborate cycle times and maximum on durations.\
\
Once I change that and get the tests passing again, I can move on. First get the real thermometer working. Then work on the hardware to get a LED simulator working.\
\
---\
D. heater interface\
\
2/16/16\
\
Tonight, I'll work on getting the Pi running. Goal would be a script for switching an LED.\
\
LED - long leg to positive (+3.3v), short to negative/ground/0v\
\
working\
\
---\
C. temperature\
\
python script, run as each minute cron job\
polls temperature from USB\
saves temperature to sqlite database every minute\
	including a 1-record last-query table\
\
first trying temperusb python package:\
https://pypi.python.org/pypi/temperusb/1.1.2\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f1\fs24 \cf0 aptitude install python-usb python-setuptools python-pip\
pip install temperusb\
sudo temper-poll
\f0\fs36 \
\
-----\
3/9/16\
\
The relay\
\
Notes here (scroll down):\
http://arduino-info.wikispaces.com/ArduinoPower\
\
VCC pin - +5v from Pi. Used as the input signal voltage.\
JD-VCC. +5v. Used to power the relay (internal LEDs). Comes with a jumper that just couples this to the VCC from Pi, which is fine.\
\
Power: Raspberry Pi requires 500 mA. Each relay requires 72 mA. The Pi power cord I have provides 2.5 A, so plenty.\
\
For the relay (potentially high-voltage) pins. Two are connected when the relay is inactive (it's the middle and outer one farthest from the jumper, the two connected in a loop in the schematic). When the relay is activated, the middle and other outer pins are connected. The two outer pins are never connected.\
\
5 volt power to VCC\
ground to GRN\
\
Thermostat Wiring\
http://www.electrical-online.com/thermostat-wiring-explained/\
\
Rh and Rc are the +24v lines for the heater and cooler. In my apartment, these have a jumper.\
\
W - ground return for heat.\
\
Y - ground return for cooling.\
\
G - ground for fan. this has 26 v of AC. Jumping this connection starts the fan almost immediately.\
\
C - ground to run the thermostat. Not in my apartment.\
\
-----------------------------------\
Mar 28 2016\
\
Hooked up the pi on the hutch. Ran the extension cord and moved the router with it.\
\
Hooked the fan wires into the wall. No AC or heater wires yet.\
\
DONE: Cron job polling temperatures into a database\
\
TODO: Nice figure on web page\
\
\
------------------------------------\
Apr 6 2016\
\
DONE: Import outside temperatures:\
	http://w1.weather.gov/obhistory/KCLT.html\
\
------------------------------------\
Apr 7 2016\
\
IN PROGRESS: graphing using D3 javascript\
\
\
\
\
\
\
}